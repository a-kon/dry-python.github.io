doctype html
html
  head
    meta(charset='utf-8')
    meta(name="description" content="Dry-Python")
    meta(name="author" content="Artem Malyshev")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Readability matters
  body
    .reveal
      .slides
        section
          h1 Readability matters
          h2
            a(href="https://dry-python.org/").
              dry-python.org
          h4 Artem Malyshev
        section
          h2 BIO
          ul
            li 5 years experience in Python
            li Django Channels 1.0
            li Dry Python
        section
          p picture from the Office Space
          p enterprise company quick story
          p code base like a house of the serial killer
        section
          p picture from the Silicon Valley
          p startup company quick story
        section
          h2 Common problems
          ul
            li Ad-hoc solutions
            li Mess in the code bases
            li No time to fix anything
        section
          h2 Picture of the dayly meeting with a lot of sleepy, tired developers
          p quick chat "we have a problem"
        section
          h2 Micro framework problems
          p very long views
          p too many "if" in one place
          p you can't edit on line without breaking 5 other use cases of this view
        section
          h2 Macro framework problems
          p method call flow charts from docs
          p your code frequently intercahnge with framework code "zig zag picture"
          p you will see blody method full of framework details right in between of your thoughts about business logic
        section
          h2 Feature request
          p looks like one sentence
          p you need to "learn and interpret" your code
        section
          blockquote
            p If your code is crap, stickies on the wall won't help. #[a(href="https://twitter.com/henrikkniberg") @HenrikKniberg]
            img(src="https://pbs.twimg.com/media/DZ4-WusUQAAdJES.jpg")
        section
          h2 This problems are framework agnostic, language agnostic and
          p even does not relate to programming at all
        section
          h2 this is hell picture
        section
          h2 the only sollution we have for this is to write a clever code
        section
          h2 the last time I saw it was...
        section
          h2 in the meeting room :)
          p where we discuss every aspect of the behavior in terms of the business logic
        section
          h2 We describe it everything in the straightforward way
          h3 Renew subscription
          ul
            li check user profile
            li check balance
            li schedule payment
            li enable service
            li send notification
        section
          h2 Why not write code the same way
          pre
            code.
              class Subscription:
                  def renew(self):
                      self.check_user_profile()
                      self.check_balance()
                      self.schedule_payment()
                      self.enable_service()
                      self.send_notification()
        section
          h2 It's called service layer
        section
          h2 And business transactions is the best way to write it
          p (in my oppinion)
          p A business transaction is a series of operations where any can fail and stop the processing
        section
          h2 Real life
          pre
            code.
              Code without stories with control flow and wariables...
        section
          h2 Dry Python
          img(src='https://raw.githubusercontent.com/dry-python/brand/master/logo/dry-python.png')
        section
          h2 Stories
          pre
            code.
              from stories import story, argument

              class Subscription:

                  @story
                  @argument('user')
                  def renew(self):
                      self.check_user_profile()
                      self.check_balance()
                      self.schedule_payment()
                      self.enable_service()
                      self.send_notification()
        section
          h2 Steps
          pre
            code.
              from stories import Success, Failure

              class Subscription:
                  ...

                  def check_user_profile(self):
                      if not has_subscription(self.ctx.user):
                          return Success()
                      else:
                          return Failure()

                  def check_balance(self):
                      ...
        section
          h2 Usage
          pre
            code.
              class SubscribeView(view):

                  def post(self, request):
                      return Subscription().renew(request.user)
        section
          h2 Benefits
        section
          h2 Picture of the annotated context
        section
          h2 Picture of Py.Test report
        section
          h2 Picture of Sentry reporter
        section
          h2 Dependencies
          p a way to integrate stories into existed frameworks without boilerplate
        section
          h2 Components
          p server side reusable ui components
