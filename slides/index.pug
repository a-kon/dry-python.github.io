doctype html
html
  head
    meta(charset="utf-8")
    meta(name="description" content="Dry-Python")
    meta(name="author" content="Artem Malyshev")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Readability matters
  body
    .reveal
      .slides
        section
          h1 Readability matters
          h2
            a(href="https://dry-python.org/").
              dry-python.org
          h4 Artem Malyshev
        section
          h2 BIO
          ul
            li 5 years experience in Python
            li Django Channels 1.0
            li Dry Python
        section
          h2 Code is all about...
          p.fragment
            b pain
          ol
            li.fragment Framework independent
            li.fragment Let's consider WEB for simplicity
        section(data-background-image=require("./pics/startup.jpg") data-background-size="contain")
          br
        section
          h2 Micro framework
          ol
            li.fragment Long handlers
            li.fragment Lots of "if" statements
        section
          h2 Long handlers
          pre
            code.python.
              121    if props[-1].endswith('$'):
              122 ->     props[-1] = props[-1][:-1]
              123
          pre.fragment
            code.python.
              Traceback (most recent call last):
                File "views.py", line 1027, in post
              ZeroDivisionError: division by zero
        section(data-background-image=require("./pics/enterprise.jpg") data-background-size="contain")
          br
        section
          h2 Big framework
          ol
            li.fragment You need method flowchart
            li.fragment Zig-zag in the traceback
            li.fragment Framework internals leak
        section(data-background-image=require("./pics/method-flowchart.png") data-background-size="contain")
          br
        section
          h2 Framework internals leak
          pre
            code.python.
              def recreate_nested_writable_fields(self, instance):
                  for field, values in self.writable_fields_to_recreate():
                      related_manager = getattr(instance, field)
                      related_manager.all().delete()
                      for data in values:
                          obj = related_manager.model.objects.create(
                              to=instance, **data)
                          related_manager.add(obj)
        section
          h2 As a result code is...
          ol
            li.fragment Fragile
            li.fragment Hard to reason about
            li.fragment Time-consuming
        section(data-background-image=require("./pics/hell.jpg") data-background-size="auto" data-background-position="top")
          br
        section
          blockquote
            p If your code is crap, stickies on the wall won't help.
            a(href="https://twitter.com/henrikkniberg").
              @HenrikKniberg
            img(src=require("./pics/stickers-on-the-wall.jpg")).plain
        section
          h2 Business objects
          pre
            code.python.
              def buy_subscription(category_id, price_id, user):

                  category = find_category()
                  price = find_price()
                  profile = find_profile()
                  if profile.balance < price.cost:
                      raise ValueError
                  del_balance(profile, price.cost)
                  save_profile(profile)
                  expires = calculate_period(price.period)
                  subscription = create_subscription(
                      profile, category, expires)
                  notification = send_notification(
                      "subscription", profile, category.name)
        section
          h2 Why not write code the same way
          pre
            code.
              class Subscription:
                  def renew(self):
                      self.check_user_profile()
                      self.check_balance()
                      self.schedule_payment()
                      self.enable_service()
                      self.send_notification()
        section
          h2 It's called service layer
        section
          h2 And business transactions is the best way to write it
          p (in my oppinion)
          p A business transaction is a series of operations where any can fail and stop the processing
        section
          h2 Real life
          pre
            code.
              Code without stories with control flow and variables...
        section
          h2 Dry Python
          p This is a set of libraries aimed to improve architecture and code design
          img(src="https://raw.githubusercontent.com/dry-python/brand/master/logo/dry-python.png").plain
        section
          h2 Stories
          pre
            code.
              from stories import story, argument

              class Subscription:
                  @story
                  @argument("category_id")
                  @argument("price_id")
                  def buy(self):
                      self.find_category()
                      self.find_price()
                      self.find_profile()
                      self.check_balance()
                      self.persist_payment()
                      self.persist_subscription()
                      self.send_subscription_notification()
        section
          h2 Steps
          pre
            code.
              from stories import Success, Failure

              class Subscription:
                  ...

                  def check_user_profile(self):
                      if not has_subscription(self.ctx.user):
                          return Success()
                      else:
                          return Failure()

                  def check_balance(self):
                      ...
        section
          h2 Usage
          pre
            code.
              class SubscribeView(view):

                  def post(self, request):
                      return Subscription().renew(request.user)
        section
          h2 Benefits
        section
          h2 Picture of the annotated context
        section(data-background-image=require("./pics/pytest.png") data-background-size="contain")
          br
        section(data-background-image=require("./pics/debug-toolbar.png") data-background-size="contain")
          br
        section(data-background-image=require("./pics/sentry.png") data-background-size="contain")
          br
        section
          h2 Dependencies
          p a way to integrate stories into existed frameworks without boilerplate
        section
          h2 Get in touch
          ul
            li
              a(href="https://dry-python.org/") Website
            li
              a(href="https://twitter.com/dry_py") Twitter
            li
              a(href="https://github.com/dry-python") Github
